/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * NotEnoughTokensAvailable: 'There are not enough tokens to buy'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughTokensAvailableError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'NotEnoughTokensAvailable'
  constructor() {
    super('There are not enough tokens to buy')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughTokensAvailableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new NotEnoughTokensAvailableError())
createErrorFromNameLookup.set(
  'NotEnoughTokensAvailable',
  () => new NotEnoughTokensAvailableError(),
)

/**
 * WrongSellerMintProvided: 'You are providing a wrong seller mint'
 *
 * @category Errors
 * @category generated
 */
export class WrongSellerMintProvidedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'WrongSellerMintProvided'
  constructor() {
    super('You are providing a wrong seller mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongSellerMintProvidedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new WrongSellerMintProvidedError())
createErrorFromNameLookup.set(
  'WrongSellerMintProvided',
  () => new WrongSellerMintProvidedError(),
)

/**
 * WrongBuyerMintProvided: 'You are providing a wrong buyer mint'
 *
 * @category Errors
 * @category generated
 */
export class WrongBuyerMintProvidedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'WrongBuyerMintProvided'
  constructor() {
    super('You are providing a wrong buyer mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongBuyerMintProvidedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new WrongBuyerMintProvidedError())
createErrorFromNameLookup.set(
  'WrongBuyerMintProvided',
  () => new WrongBuyerMintProvidedError(),
)

/**
 * WrongTokenAccount: 'You are providing a wrong token account where the Asset token is stored'
 *
 * @category Errors
 * @category generated
 */
export class WrongTokenAccountError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'WrongTokenAccount'
  constructor() {
    super(
      'You are providing a wrong token account where the Asset token is stored',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new WrongTokenAccountError())
createErrorFromNameLookup.set(
  'WrongTokenAccount',
  () => new WrongTokenAccountError(),
)

/**
 * WrongTokenOwner: 'You are trying to use an token that you don't own'
 *
 * @category Errors
 * @category generated
 */
export class WrongTokenOwnerError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'WrongTokenOwner'
  constructor() {
    super("You are trying to use an token that you don't own")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongTokenOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new WrongTokenOwnerError())
createErrorFromNameLookup.set(
  'WrongTokenOwner',
  () => new WrongTokenOwnerError(),
)

/**
 * UnusedTokenExists: 'There are still users with the token available for use'
 *
 * @category Errors
 * @category generated
 */
export class UnusedTokenExistsError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'UnusedTokenExists'
  constructor() {
    super('There are still users with the token available for use')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnusedTokenExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new UnusedTokenExistsError())
createErrorFromNameLookup.set(
  'UnusedTokenExists',
  () => new UnusedTokenExistsError(),
)

/**
 * WrongAssetAuthority: 'You are not the owner of this asset'
 *
 * @category Errors
 * @category generated
 */
export class WrongAssetAuthorityError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'WrongAssetAuthority'
  constructor() {
    super('You are not the owner of this asset')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongAssetAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new WrongAssetAuthorityError())
createErrorFromNameLookup.set(
  'WrongAssetAuthority',
  () => new WrongAssetAuthorityError(),
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
