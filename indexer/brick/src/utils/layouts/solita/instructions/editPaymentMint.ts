/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category EditPaymentMint
 * @category generated
 */
export const editPaymentMintStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'EditPaymentMintInstructionArgs',
)
/**
 * Accounts required by the _editPaymentMint_ instruction
 *
 * @property [_writable_, **signer**] productAuthority
 * @property [_writable_] product
 * @property [] paymentMint
 * @category Instructions
 * @category EditPaymentMint
 * @category generated
 */
export type EditPaymentMintInstructionAccounts = {
  productAuthority: web3.PublicKey
  product: web3.PublicKey
  paymentMint: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const editPaymentMintInstructionDiscriminator = [
  52, 180, 55, 241, 212, 97, 221, 173,
]

/**
 * Creates a _EditPaymentMint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category EditPaymentMint
 * @category generated
 */
export function createEditPaymentMintInstruction(
  accounts: EditPaymentMintInstructionAccounts,
  programId = new web3.PublicKey('PROGRAM PUBKEY'),
) {
  const [data] = editPaymentMintStruct.serialize({
    instructionDiscriminator: editPaymentMintInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.productAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.product,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentMint,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
