/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateGovernanceParams,
  createGovernanceParamsBeet,
} from '../types/CreateGovernanceParams.js'

/**
 * @category Instructions
 * @category CreateGovernance
 * @category generated
 */
export type CreateGovernanceInstructionArgs = {
  params: CreateGovernanceParams
}
/**
 * @category Instructions
 * @category CreateGovernance
 * @category generated
 */
export const createGovernanceStruct = new beet.BeetArgsStruct<
  CreateGovernanceInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', createGovernanceParamsBeet],
  ],
  'CreateGovernanceInstructionArgs',
)
/**
 * Accounts required by the _createGovernance_ instruction
 *
 * @property [_writable_, **signer**] governanceAuthority
 * @property [_writable_] governance
 * @property [] governanceMint
 * @property [_writable_] governanceBonusVault
 * @category Instructions
 * @category CreateGovernance
 * @category generated
 */
export type CreateGovernanceInstructionAccounts = {
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  governanceAuthority: web3.PublicKey
  governance: web3.PublicKey
  governanceMint: web3.PublicKey
  governanceBonusVault: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createGovernanceInstructionDiscriminator = [
  134, 46, 105, 91, 27, 91, 99, 157,
]

/**
 * Creates a _CreateGovernance_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateGovernance
 * @category generated
 */
export function createCreateGovernanceInstruction(
  accounts: CreateGovernanceInstructionAccounts,
  args: CreateGovernanceInstructionArgs,
  programId = new web3.PublicKey('PROGRAM PUBKEY'),
) {
  const [data] = createGovernanceStruct.serialize({
    instructionDiscriminator: createGovernanceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.governance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceBonusVault,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
