/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitBonus
 * @category generated
 */
export const initBonusStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitBonusInstructionArgs',
)
/**
 * Accounts required by the _initBonus_ instruction
 *
 * @property [] associatedTokenProgram
 * @property [_writable_, **signer**] signer
 * @property [] governance
 * @property [_writable_] bonus
 * @property [_writable_] bonusVault
 * @property [] governanceMint
 * @category Instructions
 * @category InitBonus
 * @category generated
 */
export type InitBonusInstructionAccounts = {
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  rent?: web3.PublicKey
  signer: web3.PublicKey
  governance: web3.PublicKey
  bonus: web3.PublicKey
  bonusVault: web3.PublicKey
  governanceMint: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initBonusInstructionDiscriminator = [
  234, 68, 252, 216, 66, 1, 25, 244,
]

/**
 * Creates a _InitBonus_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitBonus
 * @category generated
 */
export function createInitBonusInstruction(
  accounts: InitBonusInstructionAccounts,
  programId = new web3.PublicKey('PROGRAM PUBKEY'),
) {
  const [data] = initBonusStruct.serialize({
    instructionDiscriminator: initBonusInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.governance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.bonus,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bonusVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceMint,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
