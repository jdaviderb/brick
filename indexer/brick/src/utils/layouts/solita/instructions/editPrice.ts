/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category EditPrice
 * @category generated
 */
export type EditPriceInstructionArgs = {
  productPrice: beet.bignum
}
/**
 * @category Instructions
 * @category EditPrice
 * @category generated
 */
export const editPriceStruct = new beet.BeetArgsStruct<
  EditPriceInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['productPrice', beet.u64],
  ],
  'EditPriceInstructionArgs',
)
/**
 * Accounts required by the _editPrice_ instruction
 *
 * @property [_writable_, **signer**] productAuthority
 * @property [_writable_] product
 * @category Instructions
 * @category EditPrice
 * @category generated
 */
export type EditPriceInstructionAccounts = {
  productAuthority: web3.PublicKey
  product: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const editPriceInstructionDiscriminator = [
  185, 251, 18, 128, 110, 122, 160, 45,
]

/**
 * Creates a _EditPrice_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category EditPrice
 * @category generated
 */
export function createEditPriceInstruction(
  accounts: EditPriceInstructionAccounts,
  args: EditPriceInstructionArgs,
  programId = new web3.PublicKey('PROGRAM PUBKEY'),
) {
  const [data] = editPriceStruct.serialize({
    instructionDiscriminator: editPriceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.productAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.product,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
