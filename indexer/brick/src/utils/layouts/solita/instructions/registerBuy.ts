/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RegisterBuy
 * @category generated
 */
export const registerBuyStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'RegisterBuyInstructionArgs',
)
/**
 * Accounts required by the _registerBuy_ instruction
 *
 * @property [] messagesProgram
 * @property [] governanceAuthority
 * @property [_writable_, **signer**] signer
 * @property [_writable_] governance
 * @property [] product
 * @property [_writable_] paymentMint
 * @property [] governanceMint
 * @property [_writable_] buyerTransferVault
 * @property [_writable_] productAuthorityTransferVault
 * @property [_writable_] governanceTransferVault
 * @category Instructions
 * @category RegisterBuy
 * @category generated
 */
export type RegisterBuyInstructionAccounts = {
  systemProgram?: web3.PublicKey
  messagesProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  governanceAuthority: web3.PublicKey
  signer: web3.PublicKey
  governance: web3.PublicKey
  product: web3.PublicKey
  paymentMint: web3.PublicKey
  governanceMint: web3.PublicKey
  buyerTransferVault: web3.PublicKey
  productAuthorityTransferVault: web3.PublicKey
  governanceTransferVault: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const registerBuyInstructionDiscriminator = [
  49, 64, 206, 28, 74, 111, 166, 179,
]

/**
 * Creates a _RegisterBuy_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RegisterBuy
 * @category generated
 */
export function createRegisterBuyInstruction(
  accounts: RegisterBuyInstructionAccounts,
  programId = new web3.PublicKey('PROGRAM PUBKEY'),
) {
  const [data] = registerBuyStruct.serialize({
    instructionDiscriminator: registerBuyInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.messagesProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.governance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.product,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.buyerTransferVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.productAuthorityTransferVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceTransferVault,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
